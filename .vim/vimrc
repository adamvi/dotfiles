" .vimrc
" by Miika Nissi, https://miikanissi.com, https://github.com/miikanissi
" language specific configs at .vim/ftplugin/<language>.vim
" or .vim/after/syntax/<language>.vim for syntax
" taken leader shortcuts: f,g,b,r,s,u,t
" PLUGIN MANAGER {{{
if ! filereadable(system('echo -n "$HOME/.vim/autoload/plug.vim"'))
  echo "Downloading junegunn/vim-plug to manage plugins..."
  silent !mkdir -p $HOME/.vim/autoload/
  silent !curl "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" > $HOME/.vim/autoload/plug.vim
  autocmd VimEnter * PlugInstall
endif
call plug#begin('$HOME/.vim/plugged')
" color scheme
Plug 'gruvbox-community/gruvbox'
" comment stuff out
Plug 'tpope/vim-commentary'
" highlight color codes in code
Plug 'ap/vim-css-color'
" nodejs extensiopn to load extensions and host LSP
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" asynchronous lint engine for syntax checking and linters
Plug 'dense-analysis/ale'
" statusline
Plug 'itchyny/lightline.vim'
" ale errors in statusline
Plug 'maximbaz/lightline-ale'
" enchanced python syntax highlighting
Plug 'vim-python/python-syntax', { 'for': 'python' }
" automatically close html/xml tags
Plug 'alvan/vim-closetag'
" fuzzy finder with ripgrep and ultisnips support
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" better root directory detection
Plug 'airblade/vim-rooter'
" undo tree
Plug 'mbbill/undotree'
" snippets, define at .vim/UltiSnips
Plug 'SirVer/ultisnips'
" tree style file explorer
Plug 'preservim/nerdtree'
" tons of predefined snippets for UltiSnips
Plug 'honza/vim-snippets'
call plug#end()
" jump between parens with %
runtime macros/matchit.vim
"}}}
" BASICS{{{
" colors
let g:gruvbox_contrast_light = 'hard'
colorscheme gruvbox
let $BAT_THEME='GitHub'
set t_Co=256                        " use 256 colors
set termguicolors                   " use gui colors, not supported by every terminal
let &t_ut=''                        " fixes colors for kitty
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum" " fixes colors for st
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum" " fixes colors for st
highlight ColorColumn ctermbg=0 guibg=grey
set background=light
syntax on                           " syntax highlighting on
" settings
filetype plugin indent on           " indentation on
set encoding=utf-8                  " utf-8 always
set mouse=a                         " enable mouse functionality
set ttymouse=sgr                    " fix mouse scrolling for st
set noeb vb t_vb=                   " no error bells
set backspace=indent,eol,start      " normal backspace functionality
set hidden                          " hides instead of unloads buffers
set wildmode=longest,list,full      " wild mode settings
set wildmenu                        " tab complete shows all matching files
set wildignore+=*.pyc               " ignore .pyc files"
set wildignore+=**/node_modules/*   " ignore node_modules
set wildignore+=**/.git/*           " ignore git
set nocompatible                    " compatibility vim only
set clipboard=unnamedplus           " uses system clipboard
set noerrorbells                    " no error bells
set tabstop=4                       " tab stops at 4 spaces
set softtabstop=4                   " tab stops at 4 spaces
set shiftwidth=4                    " default shift
set expandtab                       " default tabs
set smartindent                     " default tabs
set autoindent                      " indents paste
set nu rnu                          " hybrid line numbers
set wrap                            " no wrap
set ignorecase                      " ignores case in search
set smartcase                       " uses smartcase in search
set noswapfile                      " no swap file
set nobackup                        " no backup file
set undodir=~/.vim/undodir          " undodir for history
set undofile                        " makes undofile for history in undodir
set incsearch                       " incremental search enabled
set ruler                           " ruler shows cur pos
set modelines=0                     " no modelines
set colorcolumn=88                  " colorcolumn is 80
set lazyredraw                      " no redraw
set magic                           " magic for regex
set scrolloff=8                     " shows 8 lines under mouse when moving the file
set matchpairs+=<:>                 " highlights matching brackets, '%' to jump between them
set viminfo='100,<9999,s100         " only stores info from 100 files at a time, 9999 lot.
set viminfo+=n~/.vim/viminfo        " store viminfo in ~/.vim folder
set laststatus=2                    " allows lightline to show
set noshowmode                      " -- INSERT -- is not shown as lightline shows it
set showcmd                         " shows the typed command
set foldmethod=indent               " enable folding
set foldlevel=99                    " never folded
set updatetime=300                  " default is 4000
set shortmess+=c                    " no messages to ins completion
set signcolumn=yes                  " always show signcolumns
"}}}
" KEY MAPPINGS{{{
" leader as comma
let mapleader = ","
" toggle folding
nnoremap <space> za
" navigation
nnoremap <PageUp> :bprevious<CR>
nnoremap <PageDown> :bnext<CR>
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-L> <C-W>l
nnoremap <C-H> <C-W>h
" snippets
nnoremap <leader>html :-1read $HOME/.vim/snippets/skeleton.html<CR>5jwf>a
nnoremap <leader>tpy :-1read $HOME/.vim/snippets/skeleton_tawasta_models.py<CR>:35<CR>wi
nnoremap <leader>tmd :-1read $HOME/.vim/snippets/skeleton_tawasta_README.rst<CR>:6<CR>i
nnoremap <leader>tman :-1read $HOME/.vim/snippets/skeleton_tawasta_manifest.py<CR>:22<CR>$hi
nnoremap <leader>txml :-1read $HOME/.vim/snippets/skeleton_tawasta_views.xml<CR>jo
"}}}
" AUTOCOMMANDS{{{
augroup personal_commands
  autocmd!
  " marker based folding in vim files
  autocmd FileType vim setlocal foldmethod=marker
  " run xrdb whenever Xdefaults or Xresources are updated.
  autocmd BufWritePost *Xresources,*Xdefaults !xrdb %
  " set .csv filetype as csv
  autocmd BufNewFile,BufRead *.csv setf csv
  " always fold vimrc
  autocmd BufRead vimrc normal zM
  " clear screen when vim exit
  autocmd VimLeave * :!clear
augroup END
"}}}
" PLUGINS{{{
" LIGHTLINE{{{
let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
      \   'right': [ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ],
      \            [ 'lineinfo' ],
      \            [ 'percent' ],
      \            [ 'fileformat', 'fileencoding', 'filetype'] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead',
      \   'linter_checking': 'lightline#ale#checking',
      \   'linter_infos': 'lightline#ale#infos',
      \   'linter_warnings': 'lightline#ale#warnings',
      \   'linter_errors': 'lightline#ale#errors',
      \   'linter_ok': 'lightline#ale#ok',
      \ },
      \ }
let g:lightline.component_type = {
      \     'linter_checking': 'right',
      \     'linter_infos': 'right',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'right',
      \ }
let g:lightline#ale#indicator_checking = "\uf110"
let g:lightline#ale#indicator_infos = "\uf129"
let g:lightline#ale#indicator_warnings = "\uf071"
let g:lightline#ale#indicator_errors = "\uf05e"
let g:lightline#ale#indicator_ok = "\uf00c"
" }}}
"FZF {{{
" FZF preview requires bat, install it
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
command! -bang -nargs=? -complete=dir GFiles
    \ call fzf#vim#gitfiles(<q-args>, fzf#vim#with_preview(), <bang>0)
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --no-messages ---ignore-case --hidden --column --line-number --no-heading --color=always -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)
nnoremap <leader>f :Files<CR>
nnoremap <leader>g :GFiles<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>r :Rg<CR>
nnoremap <leader>s :Snippets<CR>
let g:fzf_buffers_jump = 1
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }
let g:fzf_layout = { 'down': '60%' }
    "}}}
"UNDOTREE{{{
nnoremap <leader>u :UndotreeToggle<CR>
"}}}
"NERDTREE{{{
nnoremap <leader>t :NERDTreeToggle<CR>
let g:NERDTreeQuitOnOpen = 1
"}}}
" COC.NVIM{{{
let g:coc_global_extensions = [
      \ 'coc-python',
      \ 'coc-xml',
      \ 'coc-html',
      \ 'coc-css',
      \ 'coc-json',
      \ 'coc-tsserver',
      \ 'coc-sh',
      \ 'coc-vimlsp'
      \ ]
" tab for coc.nvim completion
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
" backspace aborts completion
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif
" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
" :Format formats current buffer
" command! -nargs=0 Format :call CocAction('format')
" coc status to statusline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
"}}}
" ALE{{{
" Linting and Formatting dependencies from package manager:
" libxml2-utils flake8 tidy shellcheck black
" Linting and Formatting dependencies from npm:
" prettier eslint eslint-config-prettier @prettier/plugin-xml
" Linting and Formatting dependencies from pip:
" pylint pylint_odoo
let g:ale_disable_lsp = 1
let g:ale_fix_on_save = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 1
let g:ale_set_highlights = 0
let g:ale_xml_xmllint_indentsize = 4
let g:ale_linters = {
      \   'python': ['flake8', 'pylint'],
      \   'javascript': ['eslint'],
      \   'typescript': ['eslint'],
      \   'xml': ['xmllint'],
      \   'html': ['tidy'],
      \   'sh': ['shellcheck'],
      \ }
let g:ale_fixers = {
      \   '*': ['remove_trailing_lines', 'trim_whitespace'],
      \   'python': ['black', 'remove_trailing_lines', 'trim_whitespace'],
      \   'xml': ['prettier'],
      \   'html': ['prettier'],
      \   'css': ['prettier'],
      \   'sh': ['trim_whitespace', 'remove_trailing_lines'],
      \}
nmap <silent> <C-n> <Plug>(ale_previous_wrap)
nmap <silent> <C-p> <Plug>(ale_next_wrap)
"}}}
" PYTHON-SYNTAX{{{
let g:python_highlight_all = 1
" }}}
" VIM-CLOSETAG{{{
let g:closetag_filenames = '*.html,*.xml,*.xhtml,*.js,*.jsx,*.tsx'
let g:closetag_xhtml_filenames = '*.xhtml,*.xml,*.jsx,*.js,*.jsx,*.tsx'
let g:closetag_filetypes = 'html,xml,xhtml,js,jsx,tsx'
let g:closetag_xhtml_filetypes = 'xhtml,xml,js,jsx,tsx'
let g:closetag_emptyTags_caseSensitive = 1
let g:closetag_regions = {
    \ 'typescript.tsx': 'jsxRegion,tsxRegion',
    \ 'javascript.jsx': 'jsxRegion',
    \ 'typescriptreact': 'jsxRegion,tsxRegion',
    \ 'javascriptreact': 'jsxRegion',
    \ }
let g:closetag_shortcut = '>'
let g:closetag_close_shortcut = '<leader>>'
" }}}
" VIM-ROOTER{{{
let g:rooter_patterns = ['package.json', '.git', 'Makefile']
" }}}
" ULTISNIPS{{{
let g:UltiSnipsEditSplit="horizontal"
let g:UltiSnipsExpandTrigger="<c-tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
"}}}
"}}}
